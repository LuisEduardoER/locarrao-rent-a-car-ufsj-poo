/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VisaoKmDeChegada.java
 *
 * Created on 27/11/2011, 02:37:43
 */
package locarrao.visao.grafica;

import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author Magelinha
 */
public class VisaoKmDeChegada extends javax.swing.JFrame {

    /** Creates new form VisaoKmDeChegada */
    public VisaoKmDeChegada() {
        initComponents();
        jTxtKmDeSaida.setText(String.valueOf(VisaoFechamentoLocacao.locacao.getQuilometragemDeSaida()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTxtKmDeChegada = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTxtKmDeSaida = new javax.swing.JTextField();
        jBCadastrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Quilometragem de Chegada*: ");

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("* Campo Obrigatório!");

        jLabel3.setText("Quilometragem de Saída: ");

        jTxtKmDeSaida.setEditable(false);

        jBCadastrar.setText("Cadastrar");
        jBCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCadastrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTxtKmDeSaida)
                            .addComponent(jTxtKmDeChegada, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(jBCadastrar)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(365, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTxtKmDeChegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTxtKmDeSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jBCadastrar)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCadastrarActionPerformed
        retornarKmDeChegada();
        this.dispose();
    }//GEN-LAST:event_jBCadastrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VisaoKmDeChegada().setVisible(true);
            }
        });
    }
    
    /**
     * Verifica se o campo Quilometragem de Chegada não está vazio e se não foi digitado letra
     */
    
    public boolean verificarCamposEmBranco(){
        if(jTxtKmDeChegada.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "O campo Quilometragem de Chegada é obrigatório");
            jTxtKmDeChegada.setBackground(Color.red);
            jTxtKmDeChegada.requestFocus();
            return false;
            
        }else if(!verificarCampoNumerico(jTxtKmDeChegada.getText().trim())){
            JOptionPane.showMessageDialog(null, "O campo Quilometragem de Chegada é do tipo numérico! "
                    + "Não pode conter letras");
            jTxtKmDeChegada.setBackground(Color.red);
            jTxtKmDeChegada.requestFocus();
            return false;
        }else{
            return true;
        }
    }
    
    /**
     * Verifica se contém letras na String
     */
    public boolean verificarCampoNumerico(String campo){
        for(int i=0; i< campo.length(); i++){
            if(!Character.isDigit(campo.charAt(i))){
                return false;
            }
        }
        return true;
    }
    
    /**
     * Verifica se a Quilometragem de chegada é menor que a Quilometragem de saída
     */
    
    public boolean verificarKmDeSaida(){
        Long kmDeChegada = Long.valueOf(jTxtKmDeChegada.getText().trim());
        if(kmDeChegada < VisaoFechamentoLocacao.locacao.getQuilometragemDeSaida()){
            JOptionPane.showMessageDialog(null, "Quilometragem de Chegada não pode "
                    + "ser menor que a Quilometragem de saída");
            jTxtKmDeChegada.setBackground(Color.red);
            return false;
        }else{
            return true;
        }
    }
    /**
     * Pega o valor digitado no campo e insere na locação
     */
    
    public void retornarKmDeChegada(){
        if(verificarCamposEmBranco() && verificarKmDeSaida()){
            VisaoFechamentoLocacao.locacao.setQuilometragemDeEntrada(Long.valueOf(jTxtKmDeChegada.getText().trim()));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCadastrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTxtKmDeChegada;
    private javax.swing.JTextField jTxtKmDeSaida;
    // End of variables declaration//GEN-END:variables
}
